<?phpnamespace App\Controllers;use Irsyadulibad\DataTables\DataTables;class Supplier extends BaseController{    public function json()    {        $current_user = userdata('user_id');        $role = userdata('role');                if ($role != "superadmin") {            $query = DataTables::use('supplier')                ->select('kode_negara as kode_negara,nama_client as nama_client,supplier.*')                ->join('negara', 'negara_id', 'left')                ->join('client ', 'user_id', 'left')                ->where(['supplier.user_id'=>$current_user])                ->make(true);        } else {            $query = DataTables::use('supplier')            ->select('kode_negara as kode_negara,nama_client as nama_client,supplier.*')            ->join('negara', 'negara_id', 'left')            ->join('client ', 'user_id', 'left')            ->make(true);        }                return $this->response->setJSON($query);    }    public function index()    {        $data = [            'title'     => 'Data Supplier'        ];        return view('supplier/data', $data);    }    public function add()    {        $data = [            'title'         => 'Tambah Supplier',            'negara'        => $this->negara->get(),            'validation'    => $this->validation        ];        return view('supplier/add', $data);    }    private function _rules()    {        $this->validation->setRules([            'negara_id' => ['label' => 'Negara', 'rules' => 'required'],            'nama_supplier' => ['label' => 'Nama Supplier', 'rules' => 'required'],            'alamat_supplier' => ['label' => 'Kode Supplier', 'rules' => 'required'],            'status' => ['label' => 'Status', 'rules' => 'required|numeric'],        ]);    }    public function save()    {        $this->_rules();        if (!$this->validation->withRequest($this->request)->run()) {            return redirect()                ->to('/supplier/add')                ->withInput()                ->with('validation', $this->validation);        }        $input = $this->request->getVar(null, FILTER_SANITIZE_STRING);        unset($input['csrf_test_name']);        $this->supplier->save($input);        setToast('success', "Data berhasil disimpan");        return redirect()->to('/supplier');    }    public function delete($id)    {        if ($this->request->getMethod() !== 'delete') {            return redirect()->to('/supplier');        }        $this->supplier->delete($id);        setToast('success', "Data berhasil dihapus");        return redirect()->to('/supplier');    }    public function multi_delete()    {        $checked = $this->request->getVar('checked', FILTER_SANITIZE_STRING);                foreach ($checked as $id) {            $this->supplier->delete($id);        }        setToast('success', "Data berhasil dihapus");        return redirect()->to('/supplier');    }    public function edit($id)    {        $data = [            'title'         => 'Edit Supplier',            'negara'        => $this->negara->get(),            'validation'    => $this->validation,            'supplier'      => $this->supplier->get($id)        ];        return view('supplier/edit', $data);    }    public function update()    {        $this->_rules();        $input = $this->request->getVar(null, FILTER_SANITIZE_STRING);        unset($input['csrf_test_name']);                if (!$this->validation->withRequest($this->request)->run()) {            return redirect()                ->to('/supplier/edit/'.$input['supplier_id'])                ->withInput()                ->with('validation', $this->validation);        }        $this->supplier->save($input);        setToast('success', "Data berhasil diupdate");        return redirect()->to('/supplier');    }}