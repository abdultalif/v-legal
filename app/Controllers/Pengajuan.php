<?phpnamespace App\Controllers;use Irsyadulibad\DataTables\DataTables;class Pengajuan extends BaseController{    public function json()    {        $query = DataTables::use('pengajuan')                ->select('pengajuan_id,no_invoice,tgl_invoice,buyer.nama_buyer as buyer,negara.kode_negara as negara,port_loading.nama_loading as loading,port_discharge.nama_discharge as discharge,tgl_shipment,status_dokumen,keterangan_status')                ->join('buyer', 'buyer_id', 'left')                ->join('negara', 'pengajuan.negara_id=negara.negara_id', 'left')                ->join('port_loading', 'loading_id', 'left')                ->join('port_discharge', 'discharge_id', 'left')                ->join('client', 'client_id', 'left')                ->where(['client.user_id' => userdata('user_id')])                ->make(true);        return $this->response->setJSON($query);    }    public function index()    {        $data = [            'title'     => 'Pengajuan Dokumen V-Legal'        ];        return view('pengajuan/data', $data);    }        public function ajaxdraft($pengajuan_id)    {        $query = $this->pengajuan->get($pengajuan_id);        return $this->response->setJSON($query);    }    public function ajaxdraftdetail($pengajuan_id)    {        $query = $this->detail->get($pengajuan_id);        $detail = [];        $i = 0;        foreach ($query as $d) {            $negaraId = explode(';', $d['negara_id']);            $nm_ngr = '';            $kd_ngr = '';            foreach ($negaraId as $n) {                $nm_ngr .= $this->negara->get($n)['nama_negara'] . ";";                $kd_ngr .= $this->negara->get($n)['kode_negara'] . ";";            }            $jenisId = explode(';', $d['jenis_id']);            $nm_jns = '';            foreach ($jenisId as $j) {                $nm_jns .= $this->kayu->get($j)['nama_jenis'] . ";";            }            $query[$i]['nm_jns'] = $nm_jns;            $query[$i]['nm_ngr'] = $nm_ngr;            $query[$i]['kd_ngr'] = $kd_ngr;            $i++;        }        $totalVol = 0;        $totalBerat = 0;        $totalUnit = 0;        $totalNilai = 0;        foreach ($query as $d) {            $totalVol += $d['volume'];            $totalBerat += $d['berat'];            $totalUnit += $d['jumlah'];            $totalNilai += $d['nilai'];        }        $data = [            'detail' => $query,            'totalVol' => round($totalVol, 4),            'totalBerat' => round($totalBerat, 4),            'totalUnit' => $totalUnit,            'totalNilai' => $totalNilai,            'nm_jns' => 'ENCLOSED',            'nm_ngr' => 'ENCLOSED',            'kd_ngr' => 'ENCLOSED',        ];        if (count($query) <= 1) {            $negaraId = explode(';', $query[0]['negara_id']);            $nm_ngr = '';            $kd_ngr = '';            foreach ($negaraId as $n) {                $nm_ngr .= $this->negara->get($n)['nama_negara'] . ";";                $kd_ngr .= $this->negara->get($n)['kode_negara'] . ";";            }            $jenisId = explode(';', $query[0]['jenis_id']);            $nm_jns = '';            foreach ($jenisId as $j) {                $nm_jns .= $this->kayu->get($j)['nama_jenis'] . ";";            }            $data['nm_ngr'] = $nm_ngr;            $data['kd_ngr'] = $kd_ngr;            $data['nm_jns'] = $nm_jns;        }        return $this->response->setJSON($data);    }    public function draft($pengajuan_id)    {        $pengajuan = $this->pengajuan->get($pengajuan_id);        $detail = $this->detail->get($pengajuan_id);        if (!$pengajuan) {            return redirect()->to('/pengajuan');        } else {            $currentClientId = clientdata(userdata('user_id'))['client_id'];            if ($pengajuan['client_id'] != $currentClientId) {                return redirect()->to('/pengajuan');            }        }        $totalVol = 0;        $totalBerat = 0;        $totalUnit = 0;        $totalNilai = 0;        foreach ($detail as $d) {            $totalVol += $d['volume'];            $totalBerat += $d['berat'];            $totalUnit += $d['jumlah'];            $totalNilai += $d['nilai'];        }        $data = [            'pengajuan' => $pengajuan,            'detail' => $detail,            'totalVol' => round($totalVol, 4),            'totalBerat' => round($totalBerat, 4),            'totalUnit' => $totalUnit,            'totalNilai' => $totalNilai,            'nm_ngr' => 'ENCLOSED',            'kd_ngr' => 'ENCLOSED',            'nm_jns' => 'ENCLOSED',            'negara' => $this->negara,            'kayu' => $this->kayu,        ];        if (count($detail) <= 1) {            $negaraId = explode(';', $detail[0]['negara_id']);            $nm_ngr = '';            $kd_ngr = '';            foreach ($negaraId as $n) {                $nm_ngr .= $this->negara->get($n)['nama_negara'] . ";";                $kd_ngr .= $this->negara->get($n)['kode_negara'] . ";";            }            $jenisId = explode(';', $detail[0]['jenis_id']);            $nm_jns = '';            foreach ($jenisId as $j) {                $nm_jns .= $this->kayu->get($j)['nama_jenis'] . ";";            }            $data['nm_ngr'] = $nm_ngr;            $data['kd_ngr'] = $kd_ngr;            $data['nm_jns'] = $nm_jns;        }        $dompdf = new \Dompdf\Dompdf();        $dompdf->loadHtml(view('pengajuan/draft', $data));        $dompdf->setPaper('A4', 'potrait');        $dompdf->render();        $dompdf->stream("DRAFT #{$pengajuan['no_invoice']}.pdf", array("Attachment" => false));        exit(0);    }    public function getDischarge($negara_id)    {        $request = \Config\Services::request();        $search = $request->getGet('search');        $negara = $this->negara->get($negara_id)['kode_negara'];        $discharge = $this->discharge->getDischargeByCountry($negara, $search);        return $this->response->setJSON($discharge);    }    public function add()    {        $client = $this->client->getByUserId(userdata('user_id'));        if (date('d') > env('ls.deadlineLMK')) {            if (count(cekLMK()) == 0) {                setToast('error', "Silahkan upload LMK Bulan lalu untuk membuat permohonan baru.");                return redirect()->to('/pengajuan');            }        }        if (!$client) {            setToast('info', "Silahkan lengkapi data client terlebih dahulu.");            return redirect()->to('/client/add');        }        $data = [            'title'         => 'Buat Pengajuan',            'validation'    => $this->validation,            'client'        => $client,            'buyer'         => $this->buyer->get(),            'negara'        => $this->negara->get(),            'uang'          => $this->uang->get(),            'loading'       => $this->loading->get(),        ];        return view('pengajuan/add', $data);    }    private function _rules()    {        $this->validation->setRules([            'buyer_id' => ['label' => 'Pembeli', 'rules' => 'required'],            'mata_uang' => ['label' => 'Mata Uang', 'rules' => 'required'],            'loading_id' => ['label' => 'Port of Loading', 'rules' => 'required'],            'negara_id' => ['label' => 'Negara Tujuan', 'rules' => 'required'],            'discharge_id' => ['label' => 'Port of Discharge', 'rules' => 'required'],            'no_invoice' => ['label' => 'Nomor Invoice', 'rules' => 'required|trim'],            'tgl_invoice' => ['label' => 'Tanggal Invoice', 'rules' => 'required'],            'alat_angkut' => ['label' => 'Alat Angkut', 'rules' => 'required'],            'tgl_shipment' => ['label' => 'Tanggal Shipment', 'rules' => 'required'],            'lokasi_stuffing' => ['label' => 'Lokasi Stuffing', 'rules' => 'required'],        ]);    }    public function save()    {        $this->_rules();        if (!$this->validation->withRequest($this->request)->run()) {            return redirect()                ->to('/pengajuan/add')                ->withInput()                ->with('validation', $this->validation);        }        $input = $this->request->getVar(null, FILTER_SANITIZE_STRING);        $client = $this->client->getByUserId(userdata('user_id'));        $input['client_id'] = $client['client_id'];        $input['no_invoice'] = trim($input['no_invoice']);        $this->pengajuan->save($input);        setToast('success', "Data berhasil disimpan");        return redirect()->to('/detailpengajuan/detail/'.$this->pengajuan->getInsertID());    }    private function delete_file($id)    {        $path = FCPATH.'uploads\lampiran/';        $lampiran = $this->lampiran->getIdByPengajuan($id);        foreach ($lampiran as $l) {            if (is_file($path.$l['file_lampiran'])) {                unlink($path.$l['file_lampiran']);            }            $this->lampiran->delete($l['lampiran_id']);        }    }    public function delete($id)    {        if ($this->request->getMethod() !== 'delete') {            return redirect()->to('/pengajuan');        }        $detail = $this->detail->getByPengajuanId($id);        if ($detail) {            foreach ($detail as $item) {                $this->detail->delete($item['id']);            }        }        $this->delete_file($id);        $this->pengajuan->delete($id);        setToast('success', "Data berhasil dihapus");        return redirect()->to('/pengajuan');    }    public function multi_delete()    {        $checked = $this->request->getVar('checked', FILTER_SANITIZE_STRING);        foreach ($checked as $id) {            $detail = $this->detail->getByPengajuanId($id);            if ($detail) {                foreach ($detail as $item) {                    $this->detail->delete($item['id']);                }            }            $this->delete_file($id);            $this->pengajuan->delete($id);        }        setToast('success', "Data berhasil dihapus");        return redirect()->to($_SERVER['HTTP_REFERER']);    }    public function detail($id)    {        $pengajuan = $this->pengajuan->get($id);        if (!$pengajuan) {            return redirect()->to('/pengajuan');        } else {            $currentClientId = clientdata(userdata('user_id'))['client_id'];            if ($pengajuan['client_id'] != $currentClientId) {                return redirect()->to('/pengajuan');            }        }        $data = [            'title'         => 'Detail Pengajuan',            'detail'        => $pengajuan,            'produk'        => $this->produk->get(),            'kayu'          => $this->kayu->get(),            'list_detail'   => $this->detail->get($id),            'total'         => $this->detail->getTotal($id),            'jenis_kayu'    => $this->kayu,            'negara'        => $this->negara,            'buyer'         => $this->buyer->get($pengajuan['buyer_id']),        ];        $lampiran = $this->lampiran;        $jenis = ['lmk','permohonan','invoice','packing_list','po', 'cites', 'peb'];        $data['lampiran'] = [];        foreach ($jenis as $j) {            $data['lampiran'][] = $lampiran->where(['jenis_file'=>$j,'pengajuan_id'=>$id])->first();        }        return view('pengajuan/detail', $data);    }    public function edit($id)    {        $client = $this->client->getByUserId(userdata('user_id'));        $pengajuan = $this->pengajuan->select('pengajuan.*,buyer.alamat_buyer')->where(['pengajuan_id'=>$id])->join('buyer', 'buyer_id', 'left')->first();        if (!$pengajuan) {            return redirect()->to('/pengajuan');        } else {            $currentClientId = clientdata(userdata('user_id'))['client_id'];            if ($pengajuan['client_id'] != $currentClientId) {                return redirect()->to('/pengajuan');            }        }        $data = [            'title'         => 'Detail Pengajuan',            'detail'        => $pengajuan,            'validation'    => $this->validation,            'client'        => $client,            'buyer'         => $this->buyer->get(),            'negara'        => $this->negara->get(),            'uang'          => $this->uang->get(),            'loading'       => $this->loading->get(),        ];        return view('pengajuan/edit', $data);    }    public function update()    {        $this->_rules();        $input = $this->request->getVar(null, FILTER_SANITIZE_STRING);        unset($input['csrf_test_name']);        if (!$this->validation->withRequest($this->request)->run()) {            return redirect()                ->to('/pengajuan/edit/'.$input['pengajuan_id'])                ->withInput()                ->with('validation', $this->validation);        }        $client = $this->client->getByUserId(userdata('user_id'));        $input['client_id'] = $client['client_id'];        $input['no_invoice'] = trim($input['no_invoice']);        $this->pengajuan->save($input);        setToast('success', "Data berhasil disimpan");        return redirect()->to('/pengajuan');    }    public function send($id)    {        $getLampiran = new \App\Models\LampiranModel();        $pengajuan = $this->pengajuan->get($id);        $detail = $this->detail->get($id);        $lampiran = $getLampiran->getFileKosong($id);        if ($detail) {            if (!$lampiran) {                if (date('Y-m-d', strtotime($pengajuan['tgl_invoice'])) > date('Y-m-d')) {                    setAlert('error', "Kesalahan", "Pastikan tanggal invoice tidak melewati hari ini");                } else {                    $input['keterangan_status'] = "Dokumen sedang diverifikasi oleh admin.";                    $input['status_dokumen'] = "dikirim";                    $input['pengajuan_id']  = $id;                    $input['reviewer']  = null;                    $this->pengajuan->save($input);                    setAlert('success', "Pengajuan berhasil dikirim ke admin.", "Dokumen sedang divalidasi.");                }            } else {                setAlert('error', "Kesalahan", "Lampiran pengajuan belum lengkap.");            }        } else {            setAlert('error', "Kesalahan", "Anda belum menambahkan produk pada detail pengajuan.");        }        return redirect()->to($_SERVER['HTTP_REFERER']);    }    public function json_hasil()    {        $client_id = clientdata(userdata('user_id'))['client_id'];        $query = DataTables::use('pengajuan_sent')                ->select('DISTINCT(sent_id),pengajuan.client_id,no_dokumen,no_invoice,barcode,link_cetak,pengajuan_sent.status as status,tgl_sent')                ->join('pengajuan', 'no_invoice', 'left')                ->where(['client_id'=>$client_id])                ->make(true);        return $this->response->setJSON($query);    }    public function hasil()    {        $data = [            'title' => 'Download V-Legal'        ];        return view('service/list_vlegal', $data);    }}